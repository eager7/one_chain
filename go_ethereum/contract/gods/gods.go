// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gods

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GodsABI is the input ABI used to generate the binding from.
const GodsABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getProto\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"god\",\"type\":\"uint8\"},{\"name\":\"season\",\"type\":\"uint8\"},{\"name\":\"cardType\",\"type\":\"uint8\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"mana\",\"type\":\"uint8\"},{\"name\":\"attack\",\"type\":\"uint8\"},{\"name\":\"health\",\"type\":\"uint8\"},{\"name\":\"tribe\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"transferAllFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"migrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"burnAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"season\",\"type\":\"uint8\"}],\"name\":\"makePermanantlyTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"externalID\",\"type\":\"uint16\"},{\"name\":\"god\",\"type\":\"uint8\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"mana\",\"type\":\"uint8\"},{\"name\":\"packable\",\"type\":\"bool\"}],\"name\":\"addSpell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"common\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mythic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint16\"},{\"name\":\"god\",\"type\":\"uint8\"},{\"name\":\"cardType\",\"type\":\"uint8\"},{\"name\":\"mana\",\"type\":\"uint8\"},{\"name\":\"attack\",\"type\":\"uint8\"},{\"name\":\"health\",\"type\":\"uint8\"},{\"name\":\"tribe\",\"type\":\"uint8\"}],\"name\":\"replaceProto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"seasonTradabilityLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"},{\"name\":\"limit\",\"type\":\"uint64\"}],\"name\":\"setLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"transferAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"seasonTradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposed\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"owns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approved\",\"type\":\"address\"}],\"name\":\"addPack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purity\",\"type\":\"uint16\"}],\"name\":\"getShine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"name\":\"proto\",\"type\":\"uint16\"},{\"name\":\"purity\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"migrateAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"proto\",\"type\":\"uint16\"},{\"name\":\"purity\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint64\"},{\"name\":\"set\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"limits\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint64\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proto\",\"type\":\"uint16\"}],\"name\":\"isTradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposed\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ownsAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMetadataBaseURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextSeason\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"season\",\"type\":\"uint8\"}],\"name\":\"makeUntradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"random\",\"type\":\"uint16\"}],\"name\":\"getRandomCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"externalID\",\"type\":\"uint16\"},{\"name\":\"god\",\"type\":\"uint8\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"mana\",\"type\":\"uint8\"},{\"name\":\"attack\",\"type\":\"uint8\"},{\"name\":\"durability\",\"type\":\"uint8\"},{\"name\":\"packable\",\"type\":\"bool\"}],\"name\":\"addWeapon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"externalID\",\"type\":\"uint16\"},{\"name\":\"god\",\"type\":\"uint8\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"mana\",\"type\":\"uint8\"},{\"name\":\"attack\",\"type\":\"uint8\"},{\"name\":\"health\",\"type\":\"uint8\"},{\"name\":\"cardType\",\"type\":\"uint8\"},{\"name\":\"tribe\",\"type\":\"uint8\"},{\"name\":\"packable\",\"type\":\"bool\"}],\"name\":\"addProto\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protoCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"externalID\",\"type\":\"uint16\"},{\"name\":\"god\",\"type\":\"uint8\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"mana\",\"type\":\"uint8\"},{\"name\":\"attack\",\"type\":\"uint8\"},{\"name\":\"health\",\"type\":\"uint8\"},{\"name\":\"tribe\",\"type\":\"uint8\"},{\"name\":\"packable\",\"type\":\"bool\"}],\"name\":\"addMinion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"externalIDs\",\"type\":\"uint16[]\"},{\"name\":\"gods\",\"type\":\"uint8[]\"},{\"name\":\"rarities\",\"type\":\"uint8[]\"},{\"name\":\"manas\",\"type\":\"uint8[]\"},{\"name\":\"attacks\",\"type\":\"uint8[]\"},{\"name\":\"healths\",\"type\":\"uint8[]\"},{\"name\":\"cardTypes\",\"type\":\"uint8[]\"},{\"name\":\"tribes\",\"type\":\"uint8[]\"},{\"name\":\"packable\",\"type\":\"bool[]\"}],\"name\":\"addProtos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"legendary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"approveAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"season\",\"type\":\"uint8\"}],\"name\":\"makeTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"proto\",\"type\":\"uint16\"},{\"name\":\"purity\",\"type\":\"uint16\"}],\"name\":\"createCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"previous\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proto\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"purity\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"season\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"god\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rarity\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"mana\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"attack\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"health\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"cardType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tribe\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"packable\",\"type\":\"bool\"}],\"name\":\"NewProtoCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]"

// GodsBin is the compiled bytecode used for deploying new contracts.
const GodsBin = `6000805460a060020a60ff021916905560e0604052602360808190527f68747470733a2f2f6170692e676f6473756e636861696e65642e636f6d2f636160a09081527f72642f000000000000000000000000000000000000000000000000000000000060c0526200007491601091906200023e565b503480156200008257600080fd5b5060405160208062004212833981016040525160008054600160a060020a03191633179055620000db7f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001d1810204565b6200010f7f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001d1810204565b620001437f4f558e7900000000000000000000000000000000000000000000000000000000640100000000620001d1810204565b620001777f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001d1810204565b620001ab7f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001d1810204565b60158054600160a060020a031916600160a060020a0392909216919091179055620002e3565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200020157600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600c60205260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028157805160ff1916838001178555620002b1565b82800160010185558215620002b1579182015b82811115620002b157825182559160200191906001019062000294565b50620002bf929150620002c3565b5090565b620002e091905b80821115620002bf5760008155600101620002ca565b90565b613f1f80620002f36000396000f3006080604052600436106103425763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461034757806305c4af9d1461037d57806306fdde031461040c578063081812fc14610496578063095ea7b3146104ca5780630bbe0ee3146104f05780630c340a241461055b5780630e359f1614610570578063100cdd911461058857806318160ddd146105dd57806319fa8f50146106045780631fa24aa71461063657806323b872dd1461065157806324a96d701461067b5780632f745c59146106c5578063396ed600146106e95780633cb4ff3c146107015780633f4ba83a1461071657806342842e0e1461072b57806342966c6814610755578063454b06081461076d5780634cc90115146107855780634f558e791461079d5780634f6ccce7146107b55780634fb31a6a146107cd578063524773ce1461080d5780635bd9d9a5146108225780635c975abb1461083d5780635dcbd8bb146108525780636352211e1461087b57806367025dcf1461089357806370a08231146108e95780637a8b9b851461090a578063818d4b5d14610925578063821f830f146109495780638456cb591461096a578063850e37601461097f5780638dc10768146109b15780638e7e879f146109ea5780639188d31214610a3f578063943b82f114610a5757806395d89b4114610a97578063986e82f214610aac578063a22cb46514610ac8578063a3f4df7e14610aee578063a5487e5114610b03578063a71aec7314610b1b578063a9059cbb14610b37578063ad94d90114610b4e578063b5cab1ce14610bb1578063b84c139214610bc6578063b88d4fde14610bde578063bc734f0f14610c4d578063bcb3962114610c62578063c42cf53514610c77578063c87b56dd14610c98578063c968aab314610cb0578063caa1916814610ccb578063ce9fdb7014610ced578063ced28d7714610d2c578063d7643e1814610d78578063d80f862114610d8d578063dfb6a75f14610da5578063e3c7336b14610dea578063e7cf548c14611007578063e985e9c51461101c578063eeffbe4e14611043578063f03034521461105b578063f5f23b52146110be578063f76f8d78146110d9578063fb36eba1146110ee575b600080fd5b34801561035357600080fd5b50610369600160e060020a03196004351661111c565b604080519115158252519081900360200190f35b34801561038957600080fd5b5061039961ffff6004351661113b565b604080518a1515815260ff808b166020830152898116928201929092529087166060820152608081018660048111156103ce57fe5b60ff90811682529586166020820152938516604080860191909152928516606085015250909216608082015290519081900360a00195509350505050f35b34801561041857600080fd5b50610421611296565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561045b578181015183820152602001610443565b50505050905090810190601f1680156104885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104a257600080fd5b506104ae6004356112ce565b60408051600160a060020a039092168252519081900360200190f35b3480156104d657600080fd5b506104ee600160a060020a03600435166024356112e9565b005b3480156104fc57600080fd5b5060408051602060046044358181013583810280860185019096528085526104ee958335600160a060020a0390811696602480359092169636969560649592949301928291850190849080828437509497506113299650505050505050565b34801561056757600080fd5b506104ae611365565b34801561057c57600080fd5b50610369600435611374565b34801561059457600080fd5b50604080516020600480358082013583810280860185019096528085526104ee953695939460249493850192918291850190849080828437509497506113899650505050505050565b3480156105e957600080fd5b506105f26113bd565b60408051918252519081900360200190f35b34801561061057600080fd5b506106196113c3565b60408051600160e060020a03199092168252519081900360200190f35b34801561064257600080fd5b506104ee60ff600435166113e7565b34801561065d57600080fd5b506104ee600160a060020a036004358116906024351660443561143c565b34801561068757600080fd5b506106ae61ffff6004351660ff602435811690604435811690606435166084351515611469565b6040805161ffff9092168252519081900360200190f35b3480156106d157600080fd5b506105f2600160a060020a03600435166024356114ff565b3480156106f557600080fd5b506106ae60043561156f565b34801561070d57600080fd5b506105f26115a5565b34801561072257600080fd5b506104ee6115b8565b34801561073757600080fd5b506104ee600160a060020a036004358116906024351660443561162e565b34801561076157600080fd5b506104ee600435611660565b34801561077957600080fd5b506104ee600435611691565b34801561079157600080fd5b506106ae60043561180c565b3480156107a957600080fd5b5061036960043561181a565b3480156107c157600080fd5b506105f2600435611837565b3480156107d957600080fd5b506104ee61ffff6004351660ff60243581169060443581169060643581169060843581169060a43581169060c43516611850565b34801561081957600080fd5b506105f2611b03565b34801561082e57600080fd5b5061036960ff60043516611b09565b34801561084957600080fd5b50610369611b1e565b34801561085e57600080fd5b506104ee61ffff6004351667ffffffffffffffff60243516611b2e565b34801561088757600080fd5b506104ae600435611c0c565b6040805160206004602480358281013584810280870186019097528086526104ee968435600160a060020a031696369660449591949091019291829185019084908082843750949750611c369650505050505050565b3480156108f557600080fd5b506105f2600160a060020a0360043516611c6b565b34801561091657600080fd5b5061036960ff60043516611c86565b34801561093157600080fd5b50610369600160a060020a0360043516602435611c9b565b34801561095557600080fd5b506104ee600160a060020a0360043516611cc1565b34801561097657600080fd5b506104ee611d37565b34801561098b57600080fd5b5061099b61ffff60043516611db2565b6040805160ff9092168252519081900360200190f35b3480156109bd57600080fd5b506109c9600435611dc0565b6040805161ffff938416815291909216602082015281519081900390910190f35b3480156109f657600080fd5b50604080516020600480358082013583810280860185019096528085526104ee95369593946024949385019291829185019084908082843750949750611ded9650505050505050565b348015610a4b57600080fd5b506109c9600435611e21565b348015610a6357600080fd5b50610a7361ffff60043516611e75565b6040805167ffffffffffffffff909316835290151560208301528051918290030190f35b348015610aa357600080fd5b50610421611ecc565b348015610ab857600080fd5b50610a7361ffff60043516611f03565b348015610ad457600080fd5b506104ee600160a060020a03600435166024351515611f30565b348015610afa57600080fd5b50610421611fb4565b348015610b0f57600080fd5b506106ae600435611feb565b348015610b2757600080fd5b5061036961ffff60043516611ff9565b6104ee600160a060020a0360043516602435612029565b348015610b5a57600080fd5b50604080516020600460248035828101358481028087018601909752808652610369968435600160a060020a0316963696604495919490910192918291850190849080828437509497506120849650505050505050565b348015610bbd57600080fd5b506104216120e8565b348015610bd257600080fd5b506104ae600435612176565b348015610bea57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526104ee94600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061219e9650505050505050565b348015610c5957600080fd5b506104ee6121d6565b348015610c6e57600080fd5b5061099b61225e565b348015610c8357600080fd5b506104ee600160a060020a0360043516612267565b348015610ca457600080fd5b506104216004356122ad565b348015610cbc57600080fd5b506104ee60ff6004351661234f565b348015610cd757600080fd5b506106ae60ff6004351661ffff602435166123a0565b348015610cf957600080fd5b506106ae61ffff6004351660ff60243581169060443581169060643581169060843581169060a4351660c4351515612534565b348015610d3857600080fd5b506106ae61ffff6004351660ff60243581169060443581169060643581169060843581169060a43581169060c43581169060e435166101043515156125cc565b348015610d8457600080fd5b506106ae61266c565b348015610d9957600080fd5b506106ae60043561267b565b348015610db157600080fd5b506106ae61ffff6004351660ff60243581169060443581169060643581169060843581169060a43581169060c4351660e4351515612689565b348015610df657600080fd5b50604080516020600480358082013583810280860185019096528085526106ae95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506127269650505050505050565b34801561101357600080fd5b506105f26128b5565b34801561102857600080fd5b50610369600160a060020a03600435811690602435166128bb565b34801561104f57600080fd5b506106ae6004356128e9565b34801561106757600080fd5b506040805160206004602480358281013584810280870186019097528086526104ee968435600160a060020a0316963696604495919490910192918291850190849080828437509497506128f79650505050505050565b3480156110ca57600080fd5b506104ee60ff6004351661292c565b3480156110e557600080fd5b50610421612961565b3480156110fa57600080fd5b506105f2600160a060020a036004351661ffff60243581169060443516612998565b600160e060020a0319166000908152600c602052604090205460ff1690565b6000806000806000806000806000611151613df2565b61ffff8b16600090815260066020908152604091829020825161012081018452815460ff8082161515835261010082048116948301949094526201000081048416948201949094526301000000840483166060820152929091608084019164010000000090041660048111156111c357fe5b60048111156111ce57fe5b81526020016000820160059054906101000a900460ff1660ff1660ff1681526020016000820160069054906101000a900460ff1660ff1660ff1681526020016000820160079054906101000a900460ff1660ff1660ff1681526020016000820160089054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101000151995099509950995099509950995099509950509193959799909294969850565b60408051808201909152600e81527f476f647320556e636861696e656400000000000000000000000000000000000060208201525b90565b6000908152600e6020526040902054600160a060020a031690565b6113106001828154811015156112fb57fe5b60009182526020909120015461ffff16611ff9565b151561131b57600080fd5b6113258282612b50565b5050565b60005b815181101561135f576113578484848481518110151561134857fe5b9060200190602002015161143c565b60010161132c565b50505050565b600054600160a060020a031681565b60166020526000908152604090205460ff1681565b60005b8151811015611325576113b582828151811015156113a657fe5b90602001906020020151611660565b60010161138c565b60015490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600054600160a060020a031633146113fe57600080fd5b60ff80821660009081526003602052604090205416151561141e57600080fd5b60ff166000908152600460205260409020805460ff19166001179055565b61144e6001828154811015156112fb57fe5b151561145957600080fd5b611464838383612c06565b505050565b6000611473613df2565b600054600160a060020a0316331461148a57600080fd5b6040805161012081018252600180825260ff808a16602084015260055416928201929092526060810191909152608081018660048111156114c757fe5b815260ff861660208201526000604082018190526060820181905260809091015290506114f5878285612c99565b5095945050505050565b600061150a83611c6b565b821061151557600080fd5b600160a060020a038316600090815260116020526040902080548390811061153957fe5b90600052602060002090600691828204019190066005029054906101000a900464ffffffffff1664ffffffffff16905092915050565b600b80548290811061157d57fe5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b60006013546115b26113bd565b03905090565b600054600160a060020a031633146115cf57600080fd5b60005460a060020a900460ff1615156115e757600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b80611639338261312c565b151561164457600080fd5b61135f848484602060405190810160405280600081525061219e565b803361166b82611c0c565b600160a060020a03161461167e57600080fd5b601380546001019055611325338361318b565b6000818152601660205260408120548190819060ff16156116b157600080fd5b6000848152601660209081526040808320805460ff1916600117905560155481517f6352211e000000000000000000000000000000000000000000000000000000008152600481018990529151600160a060020a0390911693636352211e93602480850194919392918390030190829087803b15801561173057600080fd5b505af1158015611744573d6000803e3d6000fd5b505050506040513d602081101561175a57600080fd5b5051601554604080517f9188d312000000000000000000000000000000000000000000000000000000008152600481018890528151939650600160a060020a0390921692639188d3129260248082019392918290030181600087803b1580156117c257600080fd5b505af11580156117d6573d6000803e3d6000fd5b505050506040513d60408110156117ec57600080fd5b50805160209091015190925090506118058383836131c9565b5050505050565b600780548290811061157d57fe5b6000908152600d6020526040902054600160a060020a0316151590565b60006118416113bd565b821061184c57600080fd5b5090565b611858613df2565b600054600160a060020a0316331461186f57600080fd5b61ffff8816600090815260066020908152604091829020825161012081018452815460ff8082161515835261010082048116948301949094526201000081048416948201949094526301000000840483166060820152929091608084019164010000000090041660048111156118e157fe5b60048111156118ec57fe5b8152905460ff650100000000008204811660208085019190915266010000000000008304821660408086019190915267010000000000000084048316606086015268010000000000000000909304821660809094019390935283820151811660009081526003909352912054919250161561196657600080fd5b610120604051908101604052806001151581526020018860ff168152602001826040015160ff1681526020018760ff168152602001826080015160048111156119ab57fe5b815260ff87811660208084019190915287821660408085019190915287831660608086019190915287841660809586015261ffff8e166000908152600684528290208651815494880151938801519288015160ff199095169015151761ff001916610100938616939093029290921762ff0000191662010000918516919091021763ff00000019166301000000929093169190910291909117808255918301519091829064ff000000001916640100000000836004811115611a6957fe5b021790555060a0820151815460c084015160e08501516101009095015165ff0000000000199092166501000000000060ff948516021766ff00000000000019166601000000000000918416919091021767ff000000000000001916670100000000000000948316949094029390931768ff000000000000000019166801000000000000000091909316029190911790555050505050505050565b60135481565b60046020526000908152604090205460ff1681565b60005460a060020a900460ff1681565b611b36613e3e565b600054600160a060020a03163314611b4d57600080fd5b5061ffff821660009081526002602090815260409182902082518084019093525467ffffffffffffffff8116835268010000000000000000900460ff1615801591830191909152611b9d57600080fd5b5060408051808201825267ffffffffffffffff92831681526001602080830191825261ffff90951660009081526002909552919093209251835491511515680100000000000000000268ff0000000000000000199190931667ffffffffffffffff199092169190911716179055565b6000818152600d6020526040812054600160a060020a0316801515611c3057600080fd5b92915050565b60005b815181101561146457611c63838383815181101515611c5457fe5b90602001906020020151612029565b600101611c39565b600160a060020a031660009081526011602052604090205490565b60036020526000908152604090205460ff1681565b600082600160a060020a0316611cb083611c0c565b600160a060020a0316149392505050565b600054600160a060020a03163314611cd857600080fd5b601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314611d4e57600080fd5b60005460a060020a900460ff1615611d6557600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6103e861ffff919091160490565b6001805482908110611dce57fe5b60009182526020909120015461ffff8082169250620100009091041682565b60005b815181101561132557611e198282815181101515611e0a57fe5b90602001906020020151611691565b600101611df0565b600080611e2c613e3e565b6001805485908110611e3a57fe5b60009182526020918290206040805180820190915291015461ffff808216808452620100009092041691909201819052909590945092505050565b600080611e80613e3e565b50505061ffff1660009081526002602090815260409182902082518084019093525467ffffffffffffffff81168084526801000000000000000090910460ff1615159290910182905291565b60408051808201909152600481527f474f445300000000000000000000000000000000000000000000000000000000602082015290565b60026020526000908152604090205467ffffffffffffffff81169068010000000000000000900460ff1682565b600160a060020a038216331415611f4657600080fd5b336000818152600f60209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60408051808201909152600e81527f476f647320556e636861696e6564000000000000000000000000000000000000602082015281565b600a80548290811061157d57fe5b61ffff1660009081526006602090815260408083205462010000900460ff90811684526003909252909120541690565b803361203482611c0c565b600160a060020a03161461204757600080fd5b6120596001838154811015156112fb57fe5b151561206457600080fd5b600160a060020a038316151561207957600080fd5b6114643384846132ae565b6000806000835111151561209757600080fd5b5060005b82518110156120dc576120c58484838151811015156120b657fe5b90602001906020020151611c9b565b15156120d457600091506120e1565b60010161209b565b600191505b5092915050565b6010805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561216e5780601f106121435761010080835404028352916020019161216e565b820191906000526020600020905b81548152906001019060200180831161215157829003601f168201915b505050505081565b601480548290811061218457fe5b600091825260209091200154600160a060020a0316905081565b816121a9338261312c565b15156121b457600080fd5b6121bf85858561143c565b6121cb85858585613300565b151561180557600080fd5b600054600160a060020a031633146121ed57600080fd5b60055460ff908116111561220057600080fd5b6005805460ff8082166001011660ff199091161790556000612223600782613e55565b506000612231600882613e55565b50600061223f600982613e55565b50600061224d600a82613e55565b50600061225b600b82613e55565b50565b60055460ff1681565b600054600160a060020a0316331461227e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6010805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152606093611c30939192909183018282801561233c5780601f106123115761010080835404028352916020019161233c565b820191906000526020600020905b81548152906001019060200180831161231f57829003601f168201915b505050505061234a8461346d565b613560565b600054600160a060020a0316331461236657600080fd5b60ff808216600090815260046020526040902054161561238557600080fd5b60ff166000908152600360205260409020805460ff19169055565b600080808080808760048111156123b357fe5b141561240357600b805461ffff88168115156123cb57fe5b068154811015156123d857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff16945061252a565b600187600481111561241157fe5b141561242957600a805461ffff88168115156123cb57fe5b600287600481111561243757fe5b141561244f576009805461ffff88168115156123cb57fe5b600387600481111561245d57fe5b1415612475576008805461ffff88168115156123cb57fe5b600487600481111561248357fe5b1415610342575060005b600754811015612518576007805461ffff881683018115156124ab57fe5b068154811015156124b857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1693506124e784611e75565b9093509150818015612503575060008367ffffffffffffffff16115b156125105783945061252a565b60010161248d565b6008805461ffff88168115156123cb57fe5b5050505092915050565b600061253e613df2565b600054600160a060020a0316331461255557600080fd5b60408051610120810182526001815260ff808b1660208301526005541691810191909152600360608201526080810188600481111561259057fe5b815260ff8089166020830152878116604083015286166060820152600060809091015290506125c0898285612c99565b50979650505050505050565b60006125d6613df2565b600054600160a060020a031633146125ed57600080fd5b60408051610120810182526001815260ff808d1660208301526005548116928201929092529086166060820152608081018a600481111561262a57fe5b81526020018960ff1681526020018860ff1681526020018760ff1681526020018560ff16815250905061265e8b8285612c99565b509998505050505050505050565b600554610100900461ffff1681565b600980548290811061157d57fe5b6000612693613df2565b600054600160a060020a031633146126aa57600080fd5b60408051610120810182526001815260ff808c166020830152600554169181019190915260026060820152608081018960048111156126e557fe5b81526020018860ff1681526020018760ff1681526020018660ff1681526020018560ff1681525090506127198a8285612c99565b5098975050505050505050565b600080612731613df2565b600054600160a060020a0316331461274857600080fd5b600091505b8b518210156128a657610120604051908101604052806001151581526020018c8481518110151561277a57fe5b602090810290910181015160ff9081168352600554169082015287516040909101908890859081106127a857fe5b9060200190602002015160ff1681526020018b848151811015156127c857fe5b9060200190602002015160048111156127dd57fe5b81526020018a848151811015156127f057fe5b9060200190602002015160ff168152602001898481518110151561281057fe5b9060200190602002015160ff168152602001888481518110151561283057fe5b9060200190602002015160ff168152602001868481518110151561285057fe5b9060200190602002015160ff16815250905061289b8c8381518110151561287357fe5b9060200190602002015182868581518110151561288c57fe5b90602001906020020151612c99565b60019091019061274d565b50509998505050505050505050565b60135490565b600160a060020a039182166000908152600f6020908152604080832093909416825291909152205460ff1690565b600880548290811061157d57fe5b60005b81518110156114645761292483838381518110151561291557fe5b906020019060200201516112e9565b6001016128fa565b600054600160a060020a0316331461294357600080fd5b60ff166000908152600360205260409020805460ff19166001179055565b60408051808201909152600481527f474f445300000000000000000000000000000000000000000000000000000000602082015281565b60006129a2613df2565b60008054819060a060020a900460ff16156129bc57600080fd5b6129c461359c565b15156129cf57600080fd5b61ffff8616600090815260066020908152604091829020825161012081018452815460ff808216151583526101008204811694830194909452620100008104841694820194909452630100000084048316606082015292909160808401916401000000009004166004811115612a4157fe5b6004811115612a4c57fe5b8152905460ff6501000000000082048116602084015266010000000000008204811660408085019190915267010000000000000083048216606085015268010000000000000000909204811660809093019290925260055490830151929550918116911614612aba57600080fd5b600483608001516004811115612acc57fe5b1415612b3a57612adb86611e75565b9092509050801580612af7575060008267ffffffffffffffff16115b1515612b0257600080fd5b61ffff86166000908152600260205260409020805467ffffffffffffffff19811667ffffffffffffffff918216600019019091161790555b612b458787876131c9565b979650505050505050565b6000612b5b82611c0c565b9050600160a060020a038381169082161415612b7657600080fd5b33600160a060020a0382161480612b925750612b9281336128bb565b1515612b9d57600080fd5b6000828152600e6020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b80612c11338261312c565b1515612c1c57600080fd5b600160a060020a0384161515612c3157600080fd5b600160a060020a0383161515612c4657600080fd5b612c5084836135ed565b612c5a848361365c565b612c6483836138bd565b8183600160a060020a031685600160a060020a0316600080516020613ed483398151915260405160405180910390a450505050565b61ffff831660009081526006602052604081205460ff1615612cba57600080fd5b6001835261ffff8416600090815260066020908152604091829020855181549287015193870151606088015160ff199094169115159190911761ff00191661010060ff958616021762ff0000191662010000918516919091021763ff000000191663010000009390921692909202178082556080850151859291829064ff000000001916640100000000836004811115612d5057fe5b021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055509050506005600181819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550507f2f7e8f79713fd202353aaa4d413bb73a3bc66d59a540f646415fd9acee7e59c684600560009054906101000a900460ff16856020015186608001518760a001518860c001518960e001518a606001518b61010001518b604051808b61ffff1661ffff1681526020018a60ff1660ff1681526020018960ff1660ff168152602001886004811115612e9f57fe5b60ff90811682529788166020820152958716604080880191909152948716606087015250918516608085015290931660a083015291151560c082015290519081900360e001945092505050a1811561135f575060808201516000816004811115612f0557fe5b1415612f6857600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db960108204018054600f9092166002026101000a61ffff818102199093169287160291909117905561135f565b6001816004811115612f7657fe5b1415612fd957600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860108204018054600f9092166002026101000a61ffff818102199093169287160291909117905561135f565b6002816004811115612fe757fe5b141561304a57600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f9092166002026101000a61ffff818102199093169287160291909117905561135f565b600381600481111561305857fe5b14156130bb57600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360108204018054600f9092166002026101000a61ffff818102199093169287160291909117905561135f565b60048160048111156130c957fe5b141561034257600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860108204018054600f9092166002026101000a61ffff818102199093169287160291909117905561135f565b60008061313883611c0c565b905080600160a060020a031684600160a060020a03161480613173575083600160a060020a0316613168846112ce565b600160a060020a0316145b80613183575061318381856128bb565b949350505050565b61319582826135ed565b61319f828261365c565b6040518190600090600160a060020a03851690600080516020613ed4833981519152908390a45050565b60006131d3613e3e565b506040805180820190915261ffff80851682528381166020830190815260018054808201825560009190915283517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68201805493518516620100000263ffff0000199290951661ffff199094169390931716929092179055613255868261398e565b6040805161ffff808816825286166020820152600160a060020a03881681830152905182917fe8a3345b7ca502cc541c08a705987fa4c03d9f59c0427175387a64cbd8f46594919081900360600190a295945050505050565b6132b883826135ed565b6132c2838261365c565b6132cc82826138bd565b8082600160a060020a031684600160a060020a0316600080516020613ed483398151915260405160405180910390a4505050565b60008061331585600160a060020a03166139d7565b15156133245760019150613464565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156133b757818101518382015260200161339f565b50505050905090810190601f1680156133e45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561340657600080fd5b505af115801561341a573d6000803e3d6000fd5b505050506040513d602081101561343057600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b606060008082818515156134b65760408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201529450613557565b8593505b83156134d157600190920191600a840493506134ba565b826040519080825280601f01601f1916602001820160405280156134ff578160200160208202803883390190505b5091505060001982015b851561355357815160001982019160f860020a6030600a8a06010291849190811061353057fe5b906020010190600160f860020a031916908160001a905350600a86049550613509565b8194505b50505050919050565b6040805160208181018352600080835283518083018552818152845192830190945281526060926135959286928692906139df565b9392505050565b6000805b6014548110156135e55760148054829081106135b857fe5b600091825260209091200154600160a060020a03163314156135dd576001915061184c565b6001016135a0565b600091505090565b81600160a060020a031661360082611c0c565b600160a060020a03161461361357600080fd5b6000818152600e6020526040902054600160a060020a031615611325576000908152600e60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b600080600061366b8585613c40565b601280548590811061367957fe5b60009182526020808320600883040154600160a060020a0389168452601190915260409092205460079091166004026101000a90910463ffffffff90811694506136c79190600190613c9216565b600160a060020a0386166000908152601160205260409020805491935090839081106136ef57fe5b90600052602060002090600691828204019190066005029054906101000a900464ffffffffff169050806011600087600160a060020a0316600160a060020a031681526020019081526020016000208463ffffffff1681548110151561375157fe5b90600052602060002090600691828204019190066005026101000a81548164ffffffffff021916908364ffffffffff16021790555060006011600087600160a060020a0316600160a060020a03168152602001908152602001600020838154811015156137ba57fe5b90600052602060002090600691828204019190066005026101000a81548164ffffffffff021916908364ffffffffff1602179055506011600086600160a060020a0316600160a060020a031681526020019081526020016000208054809190600190036138279190613e89565b50600060128581548110151561383957fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508260128264ffffffffff1681548110151561388357fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b60006138c98383613ca4565b50600160a060020a03821660009081526011602052604090205463ffffffff811681146138f557600080fd5b600160a060020a038316600090815260116020908152604082208054600181018255908352912060068083049091018054919092066005026101000a64ffffffffff8181021990921691851602179055601280548291908490811061395657fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505050565b600160a060020a03821615156139a357600080fd5b6139ad8282613d01565b6040518190600160a060020a03841690600090600080516020613ed4833981519152908290a45050565b6000903b1190565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f191660200182016040528015613a38578160200160208202803883390190505b50935083925060009150600090505b8851811015613aa5578881815181101515613a5e57fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613a8557fe5b906020010190600160f860020a031916908160001a905350600101613a47565b5060005b8751811015613b07578781815181101515613ac057fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613ae757fe5b906020010190600160f860020a031916908160001a905350600101613aa9565b5060005b8651811015613b69578681815181101515613b2257fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613b4957fe5b906020010190600160f860020a031916908160001a905350600101613b0b565b5060005b8551811015613bcb578581815181101515613b8457fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613bab57fe5b906020010190600160f860020a031916908160001a905350600101613b6d565b5060005b8451811015613c2d578481815181101515613be657fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613c0d57fe5b906020010190600160f860020a031916908160001a905350600101613bcf565b50909d9c50505050505050505050505050565b81600160a060020a0316613c5382611c0c565b600160a060020a031614613c6657600080fd5b6000908152600d60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b600082821115613c9e57fe5b50900390565b6000818152600d6020526040902054600160a060020a031615613cc657600080fd5b6000908152600d60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000613d0d8383613ca4565b50600160a060020a03821660009081526011602052604090205463ffffffff81168114613d3957600080fd5b600160a060020a039290921660009081526011602090815260408220805460018082018355918452918320600680840490910180549190930660050261010090810a64ffffffffff818102199093169690921691909102949094179091556012805491820181559091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344460088204018054600790921660040290920a63ffffffff818102199092169190931692909202919091179055565b6040805161012081018252600080825260208201819052918101829052606081018290529060808201908152600060208201819052604082018190526060820181905260809091015290565b604080518082019091526000808252602082015290565b81548183558181111561146457600f016010900481600f016010900483600052602060002091820191016114649190613eb9565b81548183558181111561146457600501600690048160050160069004836000526020600020918201910161146491905b6112cb91905b8082111561184c5760008155600101613ebf5600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582010fa10dfd0372688e0f7a010b360af415423fe495c99c201f4e1bfab3b1c44210029000000000000000000000000512fbd15bde6570ff09e4438af27ede604024515`

// DeployGods deploys a new Ethereum contract, binding an instance of Gods to it.
func DeployGods(auth *bind.TransactOpts, backend bind.ContractBackend, previous common.Address) (common.Address, *types.Transaction, *Gods, error) {
	parsed, err := abi.JSON(strings.NewReader(GodsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GodsBin), backend, previous)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gods{GodsCaller: GodsCaller{contract: contract}, GodsTransactor: GodsTransactor{contract: contract}, GodsFilterer: GodsFilterer{contract: contract}}, nil
}

// Gods is an auto generated Go binding around an Ethereum contract.
type Gods struct {
	GodsCaller     // Read-only binding to the contract
	GodsTransactor // Write-only binding to the contract
	GodsFilterer   // Log filterer for contract events
}

// GodsCaller is an auto generated read-only Go binding around an Ethereum contract.
type GodsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GodsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GodsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GodsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GodsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GodsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GodsSession struct {
	Contract     *Gods             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GodsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GodsCallerSession struct {
	Contract *GodsCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GodsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GodsTransactorSession struct {
	Contract     *GodsTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GodsRaw is an auto generated low-level Go binding around an Ethereum contract.
type GodsRaw struct {
	Contract *Gods // Generic contract binding to access the raw methods on
}

// GodsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GodsCallerRaw struct {
	Contract *GodsCaller // Generic read-only contract binding to access the raw methods on
}

// GodsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GodsTransactorRaw struct {
	Contract *GodsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGods creates a new instance of Gods, bound to a specific deployed contract.
func NewGods(address common.Address, backend bind.ContractBackend) (*Gods, error) {
	contract, err := bindGods(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gods{GodsCaller: GodsCaller{contract: contract}, GodsTransactor: GodsTransactor{contract: contract}, GodsFilterer: GodsFilterer{contract: contract}}, nil
}

// NewGodsCaller creates a new read-only instance of Gods, bound to a specific deployed contract.
func NewGodsCaller(address common.Address, caller bind.ContractCaller) (*GodsCaller, error) {
	contract, err := bindGods(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GodsCaller{contract: contract}, nil
}

// NewGodsTransactor creates a new write-only instance of Gods, bound to a specific deployed contract.
func NewGodsTransactor(address common.Address, transactor bind.ContractTransactor) (*GodsTransactor, error) {
	contract, err := bindGods(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GodsTransactor{contract: contract}, nil
}

// NewGodsFilterer creates a new log filterer instance of Gods, bound to a specific deployed contract.
func NewGodsFilterer(address common.Address, filterer bind.ContractFilterer) (*GodsFilterer, error) {
	contract, err := bindGods(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GodsFilterer{contract: contract}, nil
}

// bindGods binds a generic wrapper to an already deployed contract.
func bindGods(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GodsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gods *GodsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Gods.Contract.GodsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gods *GodsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gods.Contract.GodsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gods *GodsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gods.Contract.GodsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gods *GodsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Gods.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gods *GodsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gods.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gods *GodsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gods.Contract.contract.Transact(opts, method, params...)
}

// InterfaceIdERC165 is a free data retrieval call binding the contract method 0x19fa8f50.
//
// Solidity: function InterfaceId_ERC165() constant returns(bytes4)
func (_Gods *GodsCaller) InterfaceIdERC165(opts *bind.CallOpts) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "InterfaceId_ERC165")
	return *ret0, err
}

// InterfaceIdERC165 is a free data retrieval call binding the contract method 0x19fa8f50.
//
// Solidity: function InterfaceId_ERC165() constant returns(bytes4)
func (_Gods *GodsSession) InterfaceIdERC165() ([4]byte, error) {
	return _Gods.Contract.InterfaceIdERC165(&_Gods.CallOpts)
}

// InterfaceIdERC165 is a free data retrieval call binding the contract method 0x19fa8f50.
//
// Solidity: function InterfaceId_ERC165() constant returns(bytes4)
func (_Gods *GodsCallerSession) InterfaceIdERC165() ([4]byte, error) {
	return _Gods.Contract.InterfaceIdERC165(&_Gods.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() constant returns(string)
func (_Gods *GodsCaller) NAME(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "NAME")
	return *ret0, err
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() constant returns(string)
func (_Gods *GodsSession) NAME() (string, error) {
	return _Gods.Contract.NAME(&_Gods.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() constant returns(string)
func (_Gods *GodsCallerSession) NAME() (string, error) {
	return _Gods.Contract.NAME(&_Gods.CallOpts)
}

// SYMBOL is a free data retrieval call binding the contract method 0xf76f8d78.
//
// Solidity: function SYMBOL() constant returns(string)
func (_Gods *GodsCaller) SYMBOL(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "SYMBOL")
	return *ret0, err
}

// SYMBOL is a free data retrieval call binding the contract method 0xf76f8d78.
//
// Solidity: function SYMBOL() constant returns(string)
func (_Gods *GodsSession) SYMBOL() (string, error) {
	return _Gods.Contract.SYMBOL(&_Gods.CallOpts)
}

// SYMBOL is a free data retrieval call binding the contract method 0xf76f8d78.
//
// Solidity: function SYMBOL() constant returns(string)
func (_Gods *GodsCallerSession) SYMBOL() (string, error) {
	return _Gods.Contract.SYMBOL(&_Gods.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) constant returns(uint256)
func (_Gods *GodsCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "balanceOf", _owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) constant returns(uint256)
func (_Gods *GodsSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _Gods.Contract.BalanceOf(&_Gods.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) constant returns(uint256)
func (_Gods *GodsCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _Gods.Contract.BalanceOf(&_Gods.CallOpts, _owner)
}

// BurnCount is a free data retrieval call binding the contract method 0x524773ce.
//
// Solidity: function burnCount() constant returns(uint256)
func (_Gods *GodsCaller) BurnCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "burnCount")
	return *ret0, err
}

// BurnCount is a free data retrieval call binding the contract method 0x524773ce.
//
// Solidity: function burnCount() constant returns(uint256)
func (_Gods *GodsSession) BurnCount() (*big.Int, error) {
	return _Gods.Contract.BurnCount(&_Gods.CallOpts)
}

// BurnCount is a free data retrieval call binding the contract method 0x524773ce.
//
// Solidity: function burnCount() constant returns(uint256)
func (_Gods *GodsCallerSession) BurnCount() (*big.Int, error) {
	return _Gods.Contract.BurnCount(&_Gods.CallOpts)
}

// Cards is a free data retrieval call binding the contract method 0x8dc10768.
//
// Solidity: function cards(uint256 ) constant returns(uint16 proto, uint16 purity)
func (_Gods *GodsCaller) Cards(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Proto  uint16
	Purity uint16
}, error) {
	ret := new(struct {
		Proto  uint16
		Purity uint16
	})
	out := ret
	err := _Gods.contract.Call(opts, out, "cards", arg0)
	return *ret, err
}

// Cards is a free data retrieval call binding the contract method 0x8dc10768.
//
// Solidity: function cards(uint256 ) constant returns(uint16 proto, uint16 purity)
func (_Gods *GodsSession) Cards(arg0 *big.Int) (struct {
	Proto  uint16
	Purity uint16
}, error) {
	return _Gods.Contract.Cards(&_Gods.CallOpts, arg0)
}

// Cards is a free data retrieval call binding the contract method 0x8dc10768.
//
// Solidity: function cards(uint256 ) constant returns(uint16 proto, uint16 purity)
func (_Gods *GodsCallerSession) Cards(arg0 *big.Int) (struct {
	Proto  uint16
	Purity uint16
}, error) {
	return _Gods.Contract.Cards(&_Gods.CallOpts, arg0)
}

// Common is a free data retrieval call binding the contract method 0x396ed600.
//
// Solidity: function common(uint256 ) constant returns(uint16)
func (_Gods *GodsCaller) Common(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "common", arg0)
	return *ret0, err
}

// Common is a free data retrieval call binding the contract method 0x396ed600.
//
// Solidity: function common(uint256 ) constant returns(uint16)
func (_Gods *GodsSession) Common(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Common(&_Gods.CallOpts, arg0)
}

// Common is a free data retrieval call binding the contract method 0x396ed600.
//
// Solidity: function common(uint256 ) constant returns(uint16)
func (_Gods *GodsCallerSession) Common(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Common(&_Gods.CallOpts, arg0)
}

// CurrentSeason is a free data retrieval call binding the contract method 0xbcb39621.
//
// Solidity: function currentSeason() constant returns(uint8)
func (_Gods *GodsCaller) CurrentSeason(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "currentSeason")
	return *ret0, err
}

// CurrentSeason is a free data retrieval call binding the contract method 0xbcb39621.
//
// Solidity: function currentSeason() constant returns(uint8)
func (_Gods *GodsSession) CurrentSeason() (uint8, error) {
	return _Gods.Contract.CurrentSeason(&_Gods.CallOpts)
}

// CurrentSeason is a free data retrieval call binding the contract method 0xbcb39621.
//
// Solidity: function currentSeason() constant returns(uint8)
func (_Gods *GodsCallerSession) CurrentSeason() (uint8, error) {
	return _Gods.Contract.CurrentSeason(&_Gods.CallOpts)
}

// Epic is a free data retrieval call binding the contract method 0xd80f8621.
//
// Solidity: function epic(uint256 ) constant returns(uint16)
func (_Gods *GodsCaller) Epic(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "epic", arg0)
	return *ret0, err
}

// Epic is a free data retrieval call binding the contract method 0xd80f8621.
//
// Solidity: function epic(uint256 ) constant returns(uint16)
func (_Gods *GodsSession) Epic(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Epic(&_Gods.CallOpts, arg0)
}

// Epic is a free data retrieval call binding the contract method 0xd80f8621.
//
// Solidity: function epic(uint256 ) constant returns(uint16)
func (_Gods *GodsCallerSession) Epic(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Epic(&_Gods.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 _tokenId) constant returns(bool)
func (_Gods *GodsCaller) Exists(opts *bind.CallOpts, _tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "exists", _tokenId)
	return *ret0, err
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 _tokenId) constant returns(bool)
func (_Gods *GodsSession) Exists(_tokenId *big.Int) (bool, error) {
	return _Gods.Contract.Exists(&_Gods.CallOpts, _tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 _tokenId) constant returns(bool)
func (_Gods *GodsCallerSession) Exists(_tokenId *big.Int) (bool, error) {
	return _Gods.Contract.Exists(&_Gods.CallOpts, _tokenId)
}

// GetActiveCards is a free data retrieval call binding the contract method 0x3cb4ff3c.
//
// Solidity: function getActiveCards() constant returns(uint256)
func (_Gods *GodsCaller) GetActiveCards(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "getActiveCards")
	return *ret0, err
}

// GetActiveCards is a free data retrieval call binding the contract method 0x3cb4ff3c.
//
// Solidity: function getActiveCards() constant returns(uint256)
func (_Gods *GodsSession) GetActiveCards() (*big.Int, error) {
	return _Gods.Contract.GetActiveCards(&_Gods.CallOpts)
}

// GetActiveCards is a free data retrieval call binding the contract method 0x3cb4ff3c.
//
// Solidity: function getActiveCards() constant returns(uint256)
func (_Gods *GodsCallerSession) GetActiveCards() (*big.Int, error) {
	return _Gods.Contract.GetActiveCards(&_Gods.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) constant returns(address)
func (_Gods *GodsCaller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "getApproved", _tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) constant returns(address)
func (_Gods *GodsSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _Gods.Contract.GetApproved(&_Gods.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) constant returns(address)
func (_Gods *GodsCallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _Gods.Contract.GetApproved(&_Gods.CallOpts, _tokenId)
}

// GetBurnCount is a free data retrieval call binding the contract method 0xe7cf548c.
//
// Solidity: function getBurnCount() constant returns(uint256)
func (_Gods *GodsCaller) GetBurnCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "getBurnCount")
	return *ret0, err
}

// GetBurnCount is a free data retrieval call binding the contract method 0xe7cf548c.
//
// Solidity: function getBurnCount() constant returns(uint256)
func (_Gods *GodsSession) GetBurnCount() (*big.Int, error) {
	return _Gods.Contract.GetBurnCount(&_Gods.CallOpts)
}

// GetBurnCount is a free data retrieval call binding the contract method 0xe7cf548c.
//
// Solidity: function getBurnCount() constant returns(uint256)
func (_Gods *GodsCallerSession) GetBurnCount() (*big.Int, error) {
	return _Gods.Contract.GetBurnCount(&_Gods.CallOpts)
}

// GetCard is a free data retrieval call binding the contract method 0x9188d312.
//
// Solidity: function getCard(uint256 id) constant returns(uint16 proto, uint16 purity)
func (_Gods *GodsCaller) GetCard(opts *bind.CallOpts, id *big.Int) (struct {
	Proto  uint16
	Purity uint16
}, error) {
	ret := new(struct {
		Proto  uint16
		Purity uint16
	})
	out := ret
	err := _Gods.contract.Call(opts, out, "getCard", id)
	return *ret, err
}

// GetCard is a free data retrieval call binding the contract method 0x9188d312.
//
// Solidity: function getCard(uint256 id) constant returns(uint16 proto, uint16 purity)
func (_Gods *GodsSession) GetCard(id *big.Int) (struct {
	Proto  uint16
	Purity uint16
}, error) {
	return _Gods.Contract.GetCard(&_Gods.CallOpts, id)
}

// GetCard is a free data retrieval call binding the contract method 0x9188d312.
//
// Solidity: function getCard(uint256 id) constant returns(uint16 proto, uint16 purity)
func (_Gods *GodsCallerSession) GetCard(id *big.Int) (struct {
	Proto  uint16
	Purity uint16
}, error) {
	return _Gods.Contract.GetCard(&_Gods.CallOpts, id)
}

// GetLimit is a free data retrieval call binding the contract method 0x943b82f1.
//
// Solidity: function getLimit(uint16 id) constant returns(uint64 limit, bool set)
func (_Gods *GodsCaller) GetLimit(opts *bind.CallOpts, id uint16) (struct {
	Limit uint64
	Set   bool
}, error) {
	ret := new(struct {
		Limit uint64
		Set   bool
	})
	out := ret
	err := _Gods.contract.Call(opts, out, "getLimit", id)
	return *ret, err
}

// GetLimit is a free data retrieval call binding the contract method 0x943b82f1.
//
// Solidity: function getLimit(uint16 id) constant returns(uint64 limit, bool set)
func (_Gods *GodsSession) GetLimit(id uint16) (struct {
	Limit uint64
	Set   bool
}, error) {
	return _Gods.Contract.GetLimit(&_Gods.CallOpts, id)
}

// GetLimit is a free data retrieval call binding the contract method 0x943b82f1.
//
// Solidity: function getLimit(uint16 id) constant returns(uint64 limit, bool set)
func (_Gods *GodsCallerSession) GetLimit(id uint16) (struct {
	Limit uint64
	Set   bool
}, error) {
	return _Gods.Contract.GetLimit(&_Gods.CallOpts, id)
}

// GetProto is a free data retrieval call binding the contract method 0x05c4af9d.
//
// Solidity: function getProto(uint16 id) constant returns(bool exists, uint8 god, uint8 season, uint8 cardType, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe)
func (_Gods *GodsCaller) GetProto(opts *bind.CallOpts, id uint16) (struct {
	Exists   bool
	God      uint8
	Season   uint8
	CardType uint8
	Rarity   uint8
	Mana     uint8
	Attack   uint8
	Health   uint8
	Tribe    uint8
}, error) {
	ret := new(struct {
		Exists   bool
		God      uint8
		Season   uint8
		CardType uint8
		Rarity   uint8
		Mana     uint8
		Attack   uint8
		Health   uint8
		Tribe    uint8
	})
	out := ret
	err := _Gods.contract.Call(opts, out, "getProto", id)
	return *ret, err
}

// GetProto is a free data retrieval call binding the contract method 0x05c4af9d.
//
// Solidity: function getProto(uint16 id) constant returns(bool exists, uint8 god, uint8 season, uint8 cardType, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe)
func (_Gods *GodsSession) GetProto(id uint16) (struct {
	Exists   bool
	God      uint8
	Season   uint8
	CardType uint8
	Rarity   uint8
	Mana     uint8
	Attack   uint8
	Health   uint8
	Tribe    uint8
}, error) {
	return _Gods.Contract.GetProto(&_Gods.CallOpts, id)
}

// GetProto is a free data retrieval call binding the contract method 0x05c4af9d.
//
// Solidity: function getProto(uint16 id) constant returns(bool exists, uint8 god, uint8 season, uint8 cardType, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe)
func (_Gods *GodsCallerSession) GetProto(id uint16) (struct {
	Exists   bool
	God      uint8
	Season   uint8
	CardType uint8
	Rarity   uint8
	Mana     uint8
	Attack   uint8
	Health   uint8
	Tribe    uint8
}, error) {
	return _Gods.Contract.GetProto(&_Gods.CallOpts, id)
}

// GetRandomCard is a free data retrieval call binding the contract method 0xcaa19168.
//
// Solidity: function getRandomCard(uint8 rarity, uint16 random) constant returns(uint16)
func (_Gods *GodsCaller) GetRandomCard(opts *bind.CallOpts, rarity uint8, random uint16) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "getRandomCard", rarity, random)
	return *ret0, err
}

// GetRandomCard is a free data retrieval call binding the contract method 0xcaa19168.
//
// Solidity: function getRandomCard(uint8 rarity, uint16 random) constant returns(uint16)
func (_Gods *GodsSession) GetRandomCard(rarity uint8, random uint16) (uint16, error) {
	return _Gods.Contract.GetRandomCard(&_Gods.CallOpts, rarity, random)
}

// GetRandomCard is a free data retrieval call binding the contract method 0xcaa19168.
//
// Solidity: function getRandomCard(uint8 rarity, uint16 random) constant returns(uint16)
func (_Gods *GodsCallerSession) GetRandomCard(rarity uint8, random uint16) (uint16, error) {
	return _Gods.Contract.GetRandomCard(&_Gods.CallOpts, rarity, random)
}

// GetShine is a free data retrieval call binding the contract method 0x850e3760.
//
// Solidity: function getShine(uint16 purity) constant returns(uint8)
func (_Gods *GodsCaller) GetShine(opts *bind.CallOpts, purity uint16) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "getShine", purity)
	return *ret0, err
}

// GetShine is a free data retrieval call binding the contract method 0x850e3760.
//
// Solidity: function getShine(uint16 purity) constant returns(uint8)
func (_Gods *GodsSession) GetShine(purity uint16) (uint8, error) {
	return _Gods.Contract.GetShine(&_Gods.CallOpts, purity)
}

// GetShine is a free data retrieval call binding the contract method 0x850e3760.
//
// Solidity: function getShine(uint16 purity) constant returns(uint8)
func (_Gods *GodsCallerSession) GetShine(purity uint16) (uint8, error) {
	return _Gods.Contract.GetShine(&_Gods.CallOpts, purity)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() constant returns(address)
func (_Gods *GodsCaller) Governor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "governor")
	return *ret0, err
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() constant returns(address)
func (_Gods *GodsSession) Governor() (common.Address, error) {
	return _Gods.Contract.Governor(&_Gods.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() constant returns(address)
func (_Gods *GodsCallerSession) Governor() (common.Address, error) {
	return _Gods.Contract.Governor(&_Gods.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) constant returns(bool)
func (_Gods *GodsCaller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "isApprovedForAll", _owner, _operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) constant returns(bool)
func (_Gods *GodsSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _Gods.Contract.IsApprovedForAll(&_Gods.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) constant returns(bool)
func (_Gods *GodsCallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _Gods.Contract.IsApprovedForAll(&_Gods.CallOpts, _owner, _operator)
}

// IsTradable is a free data retrieval call binding the contract method 0xa71aec73.
//
// Solidity: function isTradable(uint16 proto) constant returns(bool)
func (_Gods *GodsCaller) IsTradable(opts *bind.CallOpts, proto uint16) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "isTradable", proto)
	return *ret0, err
}

// IsTradable is a free data retrieval call binding the contract method 0xa71aec73.
//
// Solidity: function isTradable(uint16 proto) constant returns(bool)
func (_Gods *GodsSession) IsTradable(proto uint16) (bool, error) {
	return _Gods.Contract.IsTradable(&_Gods.CallOpts, proto)
}

// IsTradable is a free data retrieval call binding the contract method 0xa71aec73.
//
// Solidity: function isTradable(uint16 proto) constant returns(bool)
func (_Gods *GodsCallerSession) IsTradable(proto uint16) (bool, error) {
	return _Gods.Contract.IsTradable(&_Gods.CallOpts, proto)
}

// Legendary is a free data retrieval call binding the contract method 0xeeffbe4e.
//
// Solidity: function legendary(uint256 ) constant returns(uint16)
func (_Gods *GodsCaller) Legendary(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "legendary", arg0)
	return *ret0, err
}

// Legendary is a free data retrieval call binding the contract method 0xeeffbe4e.
//
// Solidity: function legendary(uint256 ) constant returns(uint16)
func (_Gods *GodsSession) Legendary(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Legendary(&_Gods.CallOpts, arg0)
}

// Legendary is a free data retrieval call binding the contract method 0xeeffbe4e.
//
// Solidity: function legendary(uint256 ) constant returns(uint16)
func (_Gods *GodsCallerSession) Legendary(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Legendary(&_Gods.CallOpts, arg0)
}

// Limits is a free data retrieval call binding the contract method 0x986e82f2.
//
// Solidity: function limits(uint16 ) constant returns(uint64 limit, bool exists)
func (_Gods *GodsCaller) Limits(opts *bind.CallOpts, arg0 uint16) (struct {
	Limit  uint64
	Exists bool
}, error) {
	ret := new(struct {
		Limit  uint64
		Exists bool
	})
	out := ret
	err := _Gods.contract.Call(opts, out, "limits", arg0)
	return *ret, err
}

// Limits is a free data retrieval call binding the contract method 0x986e82f2.
//
// Solidity: function limits(uint16 ) constant returns(uint64 limit, bool exists)
func (_Gods *GodsSession) Limits(arg0 uint16) (struct {
	Limit  uint64
	Exists bool
}, error) {
	return _Gods.Contract.Limits(&_Gods.CallOpts, arg0)
}

// Limits is a free data retrieval call binding the contract method 0x986e82f2.
//
// Solidity: function limits(uint16 ) constant returns(uint64 limit, bool exists)
func (_Gods *GodsCallerSession) Limits(arg0 uint16) (struct {
	Limit  uint64
	Exists bool
}, error) {
	return _Gods.Contract.Limits(&_Gods.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x0e359f16.
//
// Solidity: function migrated(uint256 ) constant returns(bool)
func (_Gods *GodsCaller) Migrated(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "migrated", arg0)
	return *ret0, err
}

// Migrated is a free data retrieval call binding the contract method 0x0e359f16.
//
// Solidity: function migrated(uint256 ) constant returns(bool)
func (_Gods *GodsSession) Migrated(arg0 *big.Int) (bool, error) {
	return _Gods.Contract.Migrated(&_Gods.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x0e359f16.
//
// Solidity: function migrated(uint256 ) constant returns(bool)
func (_Gods *GodsCallerSession) Migrated(arg0 *big.Int) (bool, error) {
	return _Gods.Contract.Migrated(&_Gods.CallOpts, arg0)
}

// Mythic is a free data retrieval call binding the contract method 0x4cc90115.
//
// Solidity: function mythic(uint256 ) constant returns(uint16)
func (_Gods *GodsCaller) Mythic(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "mythic", arg0)
	return *ret0, err
}

// Mythic is a free data retrieval call binding the contract method 0x4cc90115.
//
// Solidity: function mythic(uint256 ) constant returns(uint16)
func (_Gods *GodsSession) Mythic(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Mythic(&_Gods.CallOpts, arg0)
}

// Mythic is a free data retrieval call binding the contract method 0x4cc90115.
//
// Solidity: function mythic(uint256 ) constant returns(uint16)
func (_Gods *GodsCallerSession) Mythic(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Mythic(&_Gods.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Gods *GodsCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Gods *GodsSession) Name() (string, error) {
	return _Gods.Contract.Name(&_Gods.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Gods *GodsCallerSession) Name() (string, error) {
	return _Gods.Contract.Name(&_Gods.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Gods *GodsCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Gods *GodsSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Gods.Contract.OwnerOf(&_Gods.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Gods *GodsCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Gods.Contract.OwnerOf(&_Gods.CallOpts, _tokenId)
}

// Owns is a free data retrieval call binding the contract method 0x818d4b5d.
//
// Solidity: function owns(address proposed, uint256 id) constant returns(bool)
func (_Gods *GodsCaller) Owns(opts *bind.CallOpts, proposed common.Address, id *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "owns", proposed, id)
	return *ret0, err
}

// Owns is a free data retrieval call binding the contract method 0x818d4b5d.
//
// Solidity: function owns(address proposed, uint256 id) constant returns(bool)
func (_Gods *GodsSession) Owns(proposed common.Address, id *big.Int) (bool, error) {
	return _Gods.Contract.Owns(&_Gods.CallOpts, proposed, id)
}

// Owns is a free data retrieval call binding the contract method 0x818d4b5d.
//
// Solidity: function owns(address proposed, uint256 id) constant returns(bool)
func (_Gods *GodsCallerSession) Owns(proposed common.Address, id *big.Int) (bool, error) {
	return _Gods.Contract.Owns(&_Gods.CallOpts, proposed, id)
}

// OwnsAll is a free data retrieval call binding the contract method 0xad94d901.
//
// Solidity: function ownsAll(address proposed, uint256[] ids) constant returns(bool)
func (_Gods *GodsCaller) OwnsAll(opts *bind.CallOpts, proposed common.Address, ids []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "ownsAll", proposed, ids)
	return *ret0, err
}

// OwnsAll is a free data retrieval call binding the contract method 0xad94d901.
//
// Solidity: function ownsAll(address proposed, uint256[] ids) constant returns(bool)
func (_Gods *GodsSession) OwnsAll(proposed common.Address, ids []*big.Int) (bool, error) {
	return _Gods.Contract.OwnsAll(&_Gods.CallOpts, proposed, ids)
}

// OwnsAll is a free data retrieval call binding the contract method 0xad94d901.
//
// Solidity: function ownsAll(address proposed, uint256[] ids) constant returns(bool)
func (_Gods *GodsCallerSession) OwnsAll(proposed common.Address, ids []*big.Int) (bool, error) {
	return _Gods.Contract.OwnsAll(&_Gods.CallOpts, proposed, ids)
}

// Packs is a free data retrieval call binding the contract method 0xb84c1392.
//
// Solidity: function packs(uint256 ) constant returns(address)
func (_Gods *GodsCaller) Packs(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "packs", arg0)
	return *ret0, err
}

// Packs is a free data retrieval call binding the contract method 0xb84c1392.
//
// Solidity: function packs(uint256 ) constant returns(address)
func (_Gods *GodsSession) Packs(arg0 *big.Int) (common.Address, error) {
	return _Gods.Contract.Packs(&_Gods.CallOpts, arg0)
}

// Packs is a free data retrieval call binding the contract method 0xb84c1392.
//
// Solidity: function packs(uint256 ) constant returns(address)
func (_Gods *GodsCallerSession) Packs(arg0 *big.Int) (common.Address, error) {
	return _Gods.Contract.Packs(&_Gods.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Gods *GodsCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Gods *GodsSession) Paused() (bool, error) {
	return _Gods.Contract.Paused(&_Gods.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Gods *GodsCallerSession) Paused() (bool, error) {
	return _Gods.Contract.Paused(&_Gods.CallOpts)
}

// ProtoCount is a free data retrieval call binding the contract method 0xd7643e18.
//
// Solidity: function protoCount() constant returns(uint16)
func (_Gods *GodsCaller) ProtoCount(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "protoCount")
	return *ret0, err
}

// ProtoCount is a free data retrieval call binding the contract method 0xd7643e18.
//
// Solidity: function protoCount() constant returns(uint16)
func (_Gods *GodsSession) ProtoCount() (uint16, error) {
	return _Gods.Contract.ProtoCount(&_Gods.CallOpts)
}

// ProtoCount is a free data retrieval call binding the contract method 0xd7643e18.
//
// Solidity: function protoCount() constant returns(uint16)
func (_Gods *GodsCallerSession) ProtoCount() (uint16, error) {
	return _Gods.Contract.ProtoCount(&_Gods.CallOpts)
}

// Rare is a free data retrieval call binding the contract method 0xa5487e51.
//
// Solidity: function rare(uint256 ) constant returns(uint16)
func (_Gods *GodsCaller) Rare(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "rare", arg0)
	return *ret0, err
}

// Rare is a free data retrieval call binding the contract method 0xa5487e51.
//
// Solidity: function rare(uint256 ) constant returns(uint16)
func (_Gods *GodsSession) Rare(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Rare(&_Gods.CallOpts, arg0)
}

// Rare is a free data retrieval call binding the contract method 0xa5487e51.
//
// Solidity: function rare(uint256 ) constant returns(uint16)
func (_Gods *GodsCallerSession) Rare(arg0 *big.Int) (uint16, error) {
	return _Gods.Contract.Rare(&_Gods.CallOpts, arg0)
}

// SeasonTradabilityLocked is a free data retrieval call binding the contract method 0x5bd9d9a5.
//
// Solidity: function seasonTradabilityLocked(uint8 ) constant returns(bool)
func (_Gods *GodsCaller) SeasonTradabilityLocked(opts *bind.CallOpts, arg0 uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "seasonTradabilityLocked", arg0)
	return *ret0, err
}

// SeasonTradabilityLocked is a free data retrieval call binding the contract method 0x5bd9d9a5.
//
// Solidity: function seasonTradabilityLocked(uint8 ) constant returns(bool)
func (_Gods *GodsSession) SeasonTradabilityLocked(arg0 uint8) (bool, error) {
	return _Gods.Contract.SeasonTradabilityLocked(&_Gods.CallOpts, arg0)
}

// SeasonTradabilityLocked is a free data retrieval call binding the contract method 0x5bd9d9a5.
//
// Solidity: function seasonTradabilityLocked(uint8 ) constant returns(bool)
func (_Gods *GodsCallerSession) SeasonTradabilityLocked(arg0 uint8) (bool, error) {
	return _Gods.Contract.SeasonTradabilityLocked(&_Gods.CallOpts, arg0)
}

// SeasonTradable is a free data retrieval call binding the contract method 0x7a8b9b85.
//
// Solidity: function seasonTradable(uint8 ) constant returns(bool)
func (_Gods *GodsCaller) SeasonTradable(opts *bind.CallOpts, arg0 uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "seasonTradable", arg0)
	return *ret0, err
}

// SeasonTradable is a free data retrieval call binding the contract method 0x7a8b9b85.
//
// Solidity: function seasonTradable(uint8 ) constant returns(bool)
func (_Gods *GodsSession) SeasonTradable(arg0 uint8) (bool, error) {
	return _Gods.Contract.SeasonTradable(&_Gods.CallOpts, arg0)
}

// SeasonTradable is a free data retrieval call binding the contract method 0x7a8b9b85.
//
// Solidity: function seasonTradable(uint8 ) constant returns(bool)
func (_Gods *GodsCallerSession) SeasonTradable(arg0 uint8) (bool, error) {
	return _Gods.Contract.SeasonTradable(&_Gods.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) constant returns(bool)
func (_Gods *GodsCaller) SupportsInterface(opts *bind.CallOpts, _interfaceId [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "supportsInterface", _interfaceId)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) constant returns(bool)
func (_Gods *GodsSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _Gods.Contract.SupportsInterface(&_Gods.CallOpts, _interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) constant returns(bool)
func (_Gods *GodsCallerSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _Gods.Contract.SupportsInterface(&_Gods.CallOpts, _interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Gods *GodsCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Gods *GodsSession) Symbol() (string, error) {
	return _Gods.Contract.Symbol(&_Gods.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Gods *GodsCallerSession) Symbol() (string, error) {
	return _Gods.Contract.Symbol(&_Gods.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 _index) constant returns(uint256)
func (_Gods *GodsCaller) TokenByIndex(opts *bind.CallOpts, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "tokenByIndex", _index)
	return *ret0, err
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 _index) constant returns(uint256)
func (_Gods *GodsSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _Gods.Contract.TokenByIndex(&_Gods.CallOpts, _index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 _index) constant returns(uint256)
func (_Gods *GodsCallerSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _Gods.Contract.TokenByIndex(&_Gods.CallOpts, _index)
}

// TokenMetadataBaseURI is a free data retrieval call binding the contract method 0xb5cab1ce.
//
// Solidity: function tokenMetadataBaseURI() constant returns(string)
func (_Gods *GodsCaller) TokenMetadataBaseURI(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "tokenMetadataBaseURI")
	return *ret0, err
}

// TokenMetadataBaseURI is a free data retrieval call binding the contract method 0xb5cab1ce.
//
// Solidity: function tokenMetadataBaseURI() constant returns(string)
func (_Gods *GodsSession) TokenMetadataBaseURI() (string, error) {
	return _Gods.Contract.TokenMetadataBaseURI(&_Gods.CallOpts)
}

// TokenMetadataBaseURI is a free data retrieval call binding the contract method 0xb5cab1ce.
//
// Solidity: function tokenMetadataBaseURI() constant returns(string)
func (_Gods *GodsCallerSession) TokenMetadataBaseURI() (string, error) {
	return _Gods.Contract.TokenMetadataBaseURI(&_Gods.CallOpts)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns(uint256)
func (_Gods *GodsCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, _owner common.Address, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "tokenOfOwnerByIndex", _owner, _index)
	return *ret0, err
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns(uint256)
func (_Gods *GodsSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _Gods.Contract.TokenOfOwnerByIndex(&_Gods.CallOpts, _owner, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns(uint256)
func (_Gods *GodsCallerSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _Gods.Contract.TokenOfOwnerByIndex(&_Gods.CallOpts, _owner, _index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) constant returns(string)
func (_Gods *GodsCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "tokenURI", _tokenId)
	return *ret0, err
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) constant returns(string)
func (_Gods *GodsSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Gods.Contract.TokenURI(&_Gods.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) constant returns(string)
func (_Gods *GodsCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Gods.Contract.TokenURI(&_Gods.CallOpts, _tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_Gods *GodsCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Gods.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_Gods *GodsSession) TotalSupply() (*big.Int, error) {
	return _Gods.Contract.TotalSupply(&_Gods.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_Gods *GodsCallerSession) TotalSupply() (*big.Int, error) {
	return _Gods.Contract.TotalSupply(&_Gods.CallOpts)
}

// AddMinion is a paid mutator transaction binding the contract method 0xdfb6a75f.
//
// Solidity: function addMinion(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable) returns(uint16)
func (_Gods *GodsTransactor) AddMinion(opts *bind.TransactOpts, externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, health uint8, tribe uint8, packable bool) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "addMinion", externalID, god, rarity, mana, attack, health, tribe, packable)
}

// AddMinion is a paid mutator transaction binding the contract method 0xdfb6a75f.
//
// Solidity: function addMinion(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable) returns(uint16)
func (_Gods *GodsSession) AddMinion(externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, health uint8, tribe uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddMinion(&_Gods.TransactOpts, externalID, god, rarity, mana, attack, health, tribe, packable)
}

// AddMinion is a paid mutator transaction binding the contract method 0xdfb6a75f.
//
// Solidity: function addMinion(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable) returns(uint16)
func (_Gods *GodsTransactorSession) AddMinion(externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, health uint8, tribe uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddMinion(&_Gods.TransactOpts, externalID, god, rarity, mana, attack, health, tribe, packable)
}

// AddPack is a paid mutator transaction binding the contract method 0x821f830f.
//
// Solidity: function addPack(address approved) returns()
func (_Gods *GodsTransactor) AddPack(opts *bind.TransactOpts, approved common.Address) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "addPack", approved)
}

// AddPack is a paid mutator transaction binding the contract method 0x821f830f.
//
// Solidity: function addPack(address approved) returns()
func (_Gods *GodsSession) AddPack(approved common.Address) (*types.Transaction, error) {
	return _Gods.Contract.AddPack(&_Gods.TransactOpts, approved)
}

// AddPack is a paid mutator transaction binding the contract method 0x821f830f.
//
// Solidity: function addPack(address approved) returns()
func (_Gods *GodsTransactorSession) AddPack(approved common.Address) (*types.Transaction, error) {
	return _Gods.Contract.AddPack(&_Gods.TransactOpts, approved)
}

// AddProto is a paid mutator transaction binding the contract method 0xced28d77.
//
// Solidity: function addProto(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable) returns(uint16)
func (_Gods *GodsTransactor) AddProto(opts *bind.TransactOpts, externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, health uint8, cardType uint8, tribe uint8, packable bool) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "addProto", externalID, god, rarity, mana, attack, health, cardType, tribe, packable)
}

// AddProto is a paid mutator transaction binding the contract method 0xced28d77.
//
// Solidity: function addProto(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable) returns(uint16)
func (_Gods *GodsSession) AddProto(externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, health uint8, cardType uint8, tribe uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddProto(&_Gods.TransactOpts, externalID, god, rarity, mana, attack, health, cardType, tribe, packable)
}

// AddProto is a paid mutator transaction binding the contract method 0xced28d77.
//
// Solidity: function addProto(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable) returns(uint16)
func (_Gods *GodsTransactorSession) AddProto(externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, health uint8, cardType uint8, tribe uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddProto(&_Gods.TransactOpts, externalID, god, rarity, mana, attack, health, cardType, tribe, packable)
}

// AddProtos is a paid mutator transaction binding the contract method 0xe3c7336b.
//
// Solidity: function addProtos(uint16[] externalIDs, uint8[] gods, uint8[] rarities, uint8[] manas, uint8[] attacks, uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable) returns(uint16)
func (_Gods *GodsTransactor) AddProtos(opts *bind.TransactOpts, externalIDs []uint16, gods []uint8, rarities []uint8, manas []uint8, attacks []uint8, healths []uint8, cardTypes []uint8, tribes []uint8, packable []bool) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "addProtos", externalIDs, gods, rarities, manas, attacks, healths, cardTypes, tribes, packable)
}

// AddProtos is a paid mutator transaction binding the contract method 0xe3c7336b.
//
// Solidity: function addProtos(uint16[] externalIDs, uint8[] gods, uint8[] rarities, uint8[] manas, uint8[] attacks, uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable) returns(uint16)
func (_Gods *GodsSession) AddProtos(externalIDs []uint16, gods []uint8, rarities []uint8, manas []uint8, attacks []uint8, healths []uint8, cardTypes []uint8, tribes []uint8, packable []bool) (*types.Transaction, error) {
	return _Gods.Contract.AddProtos(&_Gods.TransactOpts, externalIDs, gods, rarities, manas, attacks, healths, cardTypes, tribes, packable)
}

// AddProtos is a paid mutator transaction binding the contract method 0xe3c7336b.
//
// Solidity: function addProtos(uint16[] externalIDs, uint8[] gods, uint8[] rarities, uint8[] manas, uint8[] attacks, uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable) returns(uint16)
func (_Gods *GodsTransactorSession) AddProtos(externalIDs []uint16, gods []uint8, rarities []uint8, manas []uint8, attacks []uint8, healths []uint8, cardTypes []uint8, tribes []uint8, packable []bool) (*types.Transaction, error) {
	return _Gods.Contract.AddProtos(&_Gods.TransactOpts, externalIDs, gods, rarities, manas, attacks, healths, cardTypes, tribes, packable)
}

// AddSpell is a paid mutator transaction binding the contract method 0x24a96d70.
//
// Solidity: function addSpell(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, bool packable) returns(uint16)
func (_Gods *GodsTransactor) AddSpell(opts *bind.TransactOpts, externalID uint16, god uint8, rarity uint8, mana uint8, packable bool) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "addSpell", externalID, god, rarity, mana, packable)
}

// AddSpell is a paid mutator transaction binding the contract method 0x24a96d70.
//
// Solidity: function addSpell(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, bool packable) returns(uint16)
func (_Gods *GodsSession) AddSpell(externalID uint16, god uint8, rarity uint8, mana uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddSpell(&_Gods.TransactOpts, externalID, god, rarity, mana, packable)
}

// AddSpell is a paid mutator transaction binding the contract method 0x24a96d70.
//
// Solidity: function addSpell(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, bool packable) returns(uint16)
func (_Gods *GodsTransactorSession) AddSpell(externalID uint16, god uint8, rarity uint8, mana uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddSpell(&_Gods.TransactOpts, externalID, god, rarity, mana, packable)
}

// AddWeapon is a paid mutator transaction binding the contract method 0xce9fdb70.
//
// Solidity: function addWeapon(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 durability, bool packable) returns(uint16)
func (_Gods *GodsTransactor) AddWeapon(opts *bind.TransactOpts, externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, durability uint8, packable bool) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "addWeapon", externalID, god, rarity, mana, attack, durability, packable)
}

// AddWeapon is a paid mutator transaction binding the contract method 0xce9fdb70.
//
// Solidity: function addWeapon(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 durability, bool packable) returns(uint16)
func (_Gods *GodsSession) AddWeapon(externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, durability uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddWeapon(&_Gods.TransactOpts, externalID, god, rarity, mana, attack, durability, packable)
}

// AddWeapon is a paid mutator transaction binding the contract method 0xce9fdb70.
//
// Solidity: function addWeapon(uint16 externalID, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 durability, bool packable) returns(uint16)
func (_Gods *GodsTransactorSession) AddWeapon(externalID uint16, god uint8, rarity uint8, mana uint8, attack uint8, durability uint8, packable bool) (*types.Transaction, error) {
	return _Gods.Contract.AddWeapon(&_Gods.TransactOpts, externalID, god, rarity, mana, attack, durability, packable)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 id) returns()
func (_Gods *GodsTransactor) Approve(opts *bind.TransactOpts, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "approve", to, id)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 id) returns()
func (_Gods *GodsSession) Approve(to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Approve(&_Gods.TransactOpts, to, id)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 id) returns()
func (_Gods *GodsTransactorSession) Approve(to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Approve(&_Gods.TransactOpts, to, id)
}

// ApproveAll is a paid mutator transaction binding the contract method 0xf0303452.
//
// Solidity: function approveAll(address to, uint256[] ids) returns()
func (_Gods *GodsTransactor) ApproveAll(opts *bind.TransactOpts, to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "approveAll", to, ids)
}

// ApproveAll is a paid mutator transaction binding the contract method 0xf0303452.
//
// Solidity: function approveAll(address to, uint256[] ids) returns()
func (_Gods *GodsSession) ApproveAll(to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.ApproveAll(&_Gods.TransactOpts, to, ids)
}

// ApproveAll is a paid mutator transaction binding the contract method 0xf0303452.
//
// Solidity: function approveAll(address to, uint256[] ids) returns()
func (_Gods *GodsTransactorSession) ApproveAll(to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.ApproveAll(&_Gods.TransactOpts, to, ids)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 id) returns()
func (_Gods *GodsTransactor) Burn(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "burn", id)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 id) returns()
func (_Gods *GodsSession) Burn(id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Burn(&_Gods.TransactOpts, id)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 id) returns()
func (_Gods *GodsTransactorSession) Burn(id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Burn(&_Gods.TransactOpts, id)
}

// BurnAll is a paid mutator transaction binding the contract method 0x100cdd91.
//
// Solidity: function burnAll(uint256[] ids) returns()
func (_Gods *GodsTransactor) BurnAll(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "burnAll", ids)
}

// BurnAll is a paid mutator transaction binding the contract method 0x100cdd91.
//
// Solidity: function burnAll(uint256[] ids) returns()
func (_Gods *GodsSession) BurnAll(ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.BurnAll(&_Gods.TransactOpts, ids)
}

// BurnAll is a paid mutator transaction binding the contract method 0x100cdd91.
//
// Solidity: function burnAll(uint256[] ids) returns()
func (_Gods *GodsTransactorSession) BurnAll(ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.BurnAll(&_Gods.TransactOpts, ids)
}

// CreateCard is a paid mutator transaction binding the contract method 0xfb36eba1.
//
// Solidity: function createCard(address owner, uint16 proto, uint16 purity) returns(uint256)
func (_Gods *GodsTransactor) CreateCard(opts *bind.TransactOpts, owner common.Address, proto uint16, purity uint16) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "createCard", owner, proto, purity)
}

// CreateCard is a paid mutator transaction binding the contract method 0xfb36eba1.
//
// Solidity: function createCard(address owner, uint16 proto, uint16 purity) returns(uint256)
func (_Gods *GodsSession) CreateCard(owner common.Address, proto uint16, purity uint16) (*types.Transaction, error) {
	return _Gods.Contract.CreateCard(&_Gods.TransactOpts, owner, proto, purity)
}

// CreateCard is a paid mutator transaction binding the contract method 0xfb36eba1.
//
// Solidity: function createCard(address owner, uint16 proto, uint16 purity) returns(uint256)
func (_Gods *GodsTransactorSession) CreateCard(owner common.Address, proto uint16, purity uint16) (*types.Transaction, error) {
	return _Gods.Contract.CreateCard(&_Gods.TransactOpts, owner, proto, purity)
}

// MakePermanantlyTradable is a paid mutator transaction binding the contract method 0x1fa24aa7.
//
// Solidity: function makePermanantlyTradable(uint8 season) returns()
func (_Gods *GodsTransactor) MakePermanantlyTradable(opts *bind.TransactOpts, season uint8) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "makePermanantlyTradable", season)
}

// MakePermanantlyTradable is a paid mutator transaction binding the contract method 0x1fa24aa7.
//
// Solidity: function makePermanantlyTradable(uint8 season) returns()
func (_Gods *GodsSession) MakePermanantlyTradable(season uint8) (*types.Transaction, error) {
	return _Gods.Contract.MakePermanantlyTradable(&_Gods.TransactOpts, season)
}

// MakePermanantlyTradable is a paid mutator transaction binding the contract method 0x1fa24aa7.
//
// Solidity: function makePermanantlyTradable(uint8 season) returns()
func (_Gods *GodsTransactorSession) MakePermanantlyTradable(season uint8) (*types.Transaction, error) {
	return _Gods.Contract.MakePermanantlyTradable(&_Gods.TransactOpts, season)
}

// MakeTradable is a paid mutator transaction binding the contract method 0xf5f23b52.
//
// Solidity: function makeTradable(uint8 season) returns()
func (_Gods *GodsTransactor) MakeTradable(opts *bind.TransactOpts, season uint8) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "makeTradable", season)
}

// MakeTradable is a paid mutator transaction binding the contract method 0xf5f23b52.
//
// Solidity: function makeTradable(uint8 season) returns()
func (_Gods *GodsSession) MakeTradable(season uint8) (*types.Transaction, error) {
	return _Gods.Contract.MakeTradable(&_Gods.TransactOpts, season)
}

// MakeTradable is a paid mutator transaction binding the contract method 0xf5f23b52.
//
// Solidity: function makeTradable(uint8 season) returns()
func (_Gods *GodsTransactorSession) MakeTradable(season uint8) (*types.Transaction, error) {
	return _Gods.Contract.MakeTradable(&_Gods.TransactOpts, season)
}

// MakeUntradable is a paid mutator transaction binding the contract method 0xc968aab3.
//
// Solidity: function makeUntradable(uint8 season) returns()
func (_Gods *GodsTransactor) MakeUntradable(opts *bind.TransactOpts, season uint8) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "makeUntradable", season)
}

// MakeUntradable is a paid mutator transaction binding the contract method 0xc968aab3.
//
// Solidity: function makeUntradable(uint8 season) returns()
func (_Gods *GodsSession) MakeUntradable(season uint8) (*types.Transaction, error) {
	return _Gods.Contract.MakeUntradable(&_Gods.TransactOpts, season)
}

// MakeUntradable is a paid mutator transaction binding the contract method 0xc968aab3.
//
// Solidity: function makeUntradable(uint8 season) returns()
func (_Gods *GodsTransactorSession) MakeUntradable(season uint8) (*types.Transaction, error) {
	return _Gods.Contract.MakeUntradable(&_Gods.TransactOpts, season)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 id) returns()
func (_Gods *GodsTransactor) Migrate(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "migrate", id)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 id) returns()
func (_Gods *GodsSession) Migrate(id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Migrate(&_Gods.TransactOpts, id)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 id) returns()
func (_Gods *GodsTransactorSession) Migrate(id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Migrate(&_Gods.TransactOpts, id)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x8e7e879f.
//
// Solidity: function migrateAll(uint256[] ids) returns()
func (_Gods *GodsTransactor) MigrateAll(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "migrateAll", ids)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x8e7e879f.
//
// Solidity: function migrateAll(uint256[] ids) returns()
func (_Gods *GodsSession) MigrateAll(ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.MigrateAll(&_Gods.TransactOpts, ids)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x8e7e879f.
//
// Solidity: function migrateAll(uint256[] ids) returns()
func (_Gods *GodsTransactorSession) MigrateAll(ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.MigrateAll(&_Gods.TransactOpts, ids)
}

// NextSeason is a paid mutator transaction binding the contract method 0xbc734f0f.
//
// Solidity: function nextSeason() returns()
func (_Gods *GodsTransactor) NextSeason(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "nextSeason")
}

// NextSeason is a paid mutator transaction binding the contract method 0xbc734f0f.
//
// Solidity: function nextSeason() returns()
func (_Gods *GodsSession) NextSeason() (*types.Transaction, error) {
	return _Gods.Contract.NextSeason(&_Gods.TransactOpts)
}

// NextSeason is a paid mutator transaction binding the contract method 0xbc734f0f.
//
// Solidity: function nextSeason() returns()
func (_Gods *GodsTransactorSession) NextSeason() (*types.Transaction, error) {
	return _Gods.Contract.NextSeason(&_Gods.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gods *GodsTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gods *GodsSession) Pause() (*types.Transaction, error) {
	return _Gods.Contract.Pause(&_Gods.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gods *GodsTransactorSession) Pause() (*types.Transaction, error) {
	return _Gods.Contract.Pause(&_Gods.TransactOpts)
}

// ReplaceProto is a paid mutator transaction binding the contract method 0x4fb31a6a.
//
// Solidity: function replaceProto(uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe) returns()
func (_Gods *GodsTransactor) ReplaceProto(opts *bind.TransactOpts, index uint16, god uint8, cardType uint8, mana uint8, attack uint8, health uint8, tribe uint8) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "replaceProto", index, god, cardType, mana, attack, health, tribe)
}

// ReplaceProto is a paid mutator transaction binding the contract method 0x4fb31a6a.
//
// Solidity: function replaceProto(uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe) returns()
func (_Gods *GodsSession) ReplaceProto(index uint16, god uint8, cardType uint8, mana uint8, attack uint8, health uint8, tribe uint8) (*types.Transaction, error) {
	return _Gods.Contract.ReplaceProto(&_Gods.TransactOpts, index, god, cardType, mana, attack, health, tribe)
}

// ReplaceProto is a paid mutator transaction binding the contract method 0x4fb31a6a.
//
// Solidity: function replaceProto(uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe) returns()
func (_Gods *GodsTransactorSession) ReplaceProto(index uint16, god uint8, cardType uint8, mana uint8, attack uint8, health uint8, tribe uint8) (*types.Transaction, error) {
	return _Gods.Contract.ReplaceProto(&_Gods.TransactOpts, index, god, cardType, mana, attack, health, tribe)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) returns()
func (_Gods *GodsTransactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) returns()
func (_Gods *GodsSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Gods.Contract.SafeTransferFrom(&_Gods.TransactOpts, _from, _to, _tokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) returns()
func (_Gods *GodsTransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Gods.Contract.SafeTransferFrom(&_Gods.TransactOpts, _from, _to, _tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _to, bool _approved) returns()
func (_Gods *GodsTransactor) SetApprovalForAll(opts *bind.TransactOpts, _to common.Address, _approved bool) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "setApprovalForAll", _to, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _to, bool _approved) returns()
func (_Gods *GodsSession) SetApprovalForAll(_to common.Address, _approved bool) (*types.Transaction, error) {
	return _Gods.Contract.SetApprovalForAll(&_Gods.TransactOpts, _to, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _to, bool _approved) returns()
func (_Gods *GodsTransactorSession) SetApprovalForAll(_to common.Address, _approved bool) (*types.Transaction, error) {
	return _Gods.Contract.SetApprovalForAll(&_Gods.TransactOpts, _to, _approved)
}

// SetGovernor is a paid mutator transaction binding the contract method 0xc42cf535.
//
// Solidity: function setGovernor(address _gov) returns()
func (_Gods *GodsTransactor) SetGovernor(opts *bind.TransactOpts, _gov common.Address) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "setGovernor", _gov)
}

// SetGovernor is a paid mutator transaction binding the contract method 0xc42cf535.
//
// Solidity: function setGovernor(address _gov) returns()
func (_Gods *GodsSession) SetGovernor(_gov common.Address) (*types.Transaction, error) {
	return _Gods.Contract.SetGovernor(&_Gods.TransactOpts, _gov)
}

// SetGovernor is a paid mutator transaction binding the contract method 0xc42cf535.
//
// Solidity: function setGovernor(address _gov) returns()
func (_Gods *GodsTransactorSession) SetGovernor(_gov common.Address) (*types.Transaction, error) {
	return _Gods.Contract.SetGovernor(&_Gods.TransactOpts, _gov)
}

// SetLimit is a paid mutator transaction binding the contract method 0x5dcbd8bb.
//
// Solidity: function setLimit(uint16 id, uint64 limit) returns()
func (_Gods *GodsTransactor) SetLimit(opts *bind.TransactOpts, id uint16, limit uint64) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "setLimit", id, limit)
}

// SetLimit is a paid mutator transaction binding the contract method 0x5dcbd8bb.
//
// Solidity: function setLimit(uint16 id, uint64 limit) returns()
func (_Gods *GodsSession) SetLimit(id uint16, limit uint64) (*types.Transaction, error) {
	return _Gods.Contract.SetLimit(&_Gods.TransactOpts, id, limit)
}

// SetLimit is a paid mutator transaction binding the contract method 0x5dcbd8bb.
//
// Solidity: function setLimit(uint16 id, uint64 limit) returns()
func (_Gods *GodsTransactorSession) SetLimit(id uint16, limit uint64) (*types.Transaction, error) {
	return _Gods.Contract.SetLimit(&_Gods.TransactOpts, id, limit)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 id) returns()
func (_Gods *GodsTransactor) Transfer(opts *bind.TransactOpts, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "transfer", to, id)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 id) returns()
func (_Gods *GodsSession) Transfer(to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Transfer(&_Gods.TransactOpts, to, id)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 id) returns()
func (_Gods *GodsTransactorSession) Transfer(to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.Transfer(&_Gods.TransactOpts, to, id)
}

// TransferAll is a paid mutator transaction binding the contract method 0x67025dcf.
//
// Solidity: function transferAll(address to, uint256[] ids) returns()
func (_Gods *GodsTransactor) TransferAll(opts *bind.TransactOpts, to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "transferAll", to, ids)
}

// TransferAll is a paid mutator transaction binding the contract method 0x67025dcf.
//
// Solidity: function transferAll(address to, uint256[] ids) returns()
func (_Gods *GodsSession) TransferAll(to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.TransferAll(&_Gods.TransactOpts, to, ids)
}

// TransferAll is a paid mutator transaction binding the contract method 0x67025dcf.
//
// Solidity: function transferAll(address to, uint256[] ids) returns()
func (_Gods *GodsTransactorSession) TransferAll(to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.TransferAll(&_Gods.TransactOpts, to, ids)
}

// TransferAllFrom is a paid mutator transaction binding the contract method 0x0bbe0ee3.
//
// Solidity: function transferAllFrom(address from, address to, uint256[] ids) returns()
func (_Gods *GodsTransactor) TransferAllFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "transferAllFrom", from, to, ids)
}

// TransferAllFrom is a paid mutator transaction binding the contract method 0x0bbe0ee3.
//
// Solidity: function transferAllFrom(address from, address to, uint256[] ids) returns()
func (_Gods *GodsSession) TransferAllFrom(from common.Address, to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.TransferAllFrom(&_Gods.TransactOpts, from, to, ids)
}

// TransferAllFrom is a paid mutator transaction binding the contract method 0x0bbe0ee3.
//
// Solidity: function transferAllFrom(address from, address to, uint256[] ids) returns()
func (_Gods *GodsTransactorSession) TransferAllFrom(from common.Address, to common.Address, ids []*big.Int) (*types.Transaction, error) {
	return _Gods.Contract.TransferAllFrom(&_Gods.TransactOpts, from, to, ids)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 id) returns()
func (_Gods *GodsTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "transferFrom", from, to, id)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 id) returns()
func (_Gods *GodsSession) TransferFrom(from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.TransferFrom(&_Gods.TransactOpts, from, to, id)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 id) returns()
func (_Gods *GodsTransactorSession) TransferFrom(from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _Gods.Contract.TransferFrom(&_Gods.TransactOpts, from, to, id)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gods *GodsTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gods.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gods *GodsSession) Unpause() (*types.Transaction, error) {
	return _Gods.Contract.Unpause(&_Gods.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gods *GodsTransactorSession) Unpause() (*types.Transaction, error) {
	return _Gods.Contract.Unpause(&_Gods.TransactOpts)
}

// GodsApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Gods contract.
type GodsApprovalIterator struct {
	Event *GodsApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsApproval represents a Approval event raised by the Gods contract.
type GodsApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_Gods *GodsFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (*GodsApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Gods.contract.FilterLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &GodsApprovalIterator{contract: _Gods.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_Gods *GodsFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *GodsApproval, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Gods.contract.WatchLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsApproval)
				if err := _Gods.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// GodsApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Gods contract.
type GodsApprovalForAllIterator struct {
	Event *GodsApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsApprovalForAll represents a ApprovalForAll event raised by the Gods contract.
type GodsApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_Gods *GodsFilterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*GodsApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _Gods.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &GodsApprovalForAllIterator{contract: _Gods.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_Gods *GodsFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *GodsApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _Gods.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsApprovalForAll)
				if err := _Gods.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// GodsCardCreatedIterator is returned from FilterCardCreated and is used to iterate over the raw logs and unpacked data for CardCreated events raised by the Gods contract.
type GodsCardCreatedIterator struct {
	Event *GodsCardCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsCardCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsCardCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsCardCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsCardCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsCardCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsCardCreated represents a CardCreated event raised by the Gods contract.
type GodsCardCreated struct {
	Id     *big.Int
	Proto  uint16
	Purity uint16
	Owner  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCardCreated is a free log retrieval operation binding the contract event 0xe8a3345b7ca502cc541c08a705987fa4c03d9f59c0427175387a64cbd8f46594.
//
// Solidity: event CardCreated(uint256 indexed id, uint16 proto, uint16 purity, address owner)
func (_Gods *GodsFilterer) FilterCardCreated(opts *bind.FilterOpts, id []*big.Int) (*GodsCardCreatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Gods.contract.FilterLogs(opts, "CardCreated", idRule)
	if err != nil {
		return nil, err
	}
	return &GodsCardCreatedIterator{contract: _Gods.contract, event: "CardCreated", logs: logs, sub: sub}, nil
}

// WatchCardCreated is a free log subscription operation binding the contract event 0xe8a3345b7ca502cc541c08a705987fa4c03d9f59c0427175387a64cbd8f46594.
//
// Solidity: event CardCreated(uint256 indexed id, uint16 proto, uint16 purity, address owner)
func (_Gods *GodsFilterer) WatchCardCreated(opts *bind.WatchOpts, sink chan<- *GodsCardCreated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Gods.contract.WatchLogs(opts, "CardCreated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsCardCreated)
				if err := _Gods.contract.UnpackLog(event, "CardCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// GodsNewProtoCardIterator is returned from FilterNewProtoCard and is used to iterate over the raw logs and unpacked data for NewProtoCard events raised by the Gods contract.
type GodsNewProtoCardIterator struct {
	Event *GodsNewProtoCard // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsNewProtoCardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsNewProtoCard)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsNewProtoCard)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsNewProtoCardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsNewProtoCardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsNewProtoCard represents a NewProtoCard event raised by the Gods contract.
type GodsNewProtoCard struct {
	Id       uint16
	Season   uint8
	God      uint8
	Rarity   uint8
	Mana     uint8
	Attack   uint8
	Health   uint8
	CardType uint8
	Tribe    uint8
	Packable bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewProtoCard is a free log retrieval operation binding the contract event 0x2f7e8f79713fd202353aaa4d413bb73a3bc66d59a540f646415fd9acee7e59c6.
//
// Solidity: event NewProtoCard(uint16 id, uint8 season, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable)
func (_Gods *GodsFilterer) FilterNewProtoCard(opts *bind.FilterOpts) (*GodsNewProtoCardIterator, error) {

	logs, sub, err := _Gods.contract.FilterLogs(opts, "NewProtoCard")
	if err != nil {
		return nil, err
	}
	return &GodsNewProtoCardIterator{contract: _Gods.contract, event: "NewProtoCard", logs: logs, sub: sub}, nil
}

// WatchNewProtoCard is a free log subscription operation binding the contract event 0x2f7e8f79713fd202353aaa4d413bb73a3bc66d59a540f646415fd9acee7e59c6.
//
// Solidity: event NewProtoCard(uint16 id, uint8 season, uint8 god, uint8 rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable)
func (_Gods *GodsFilterer) WatchNewProtoCard(opts *bind.WatchOpts, sink chan<- *GodsNewProtoCard) (event.Subscription, error) {

	logs, sub, err := _Gods.contract.WatchLogs(opts, "NewProtoCard")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsNewProtoCard)
				if err := _Gods.contract.UnpackLog(event, "NewProtoCard", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// GodsPauseIterator is returned from FilterPause and is used to iterate over the raw logs and unpacked data for Pause events raised by the Gods contract.
type GodsPauseIterator struct {
	Event *GodsPause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsPauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsPause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsPause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsPauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsPauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsPause represents a Pause event raised by the Gods contract.
type GodsPause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPause is a free log retrieval operation binding the contract event 0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625.
//
// Solidity: event Pause()
func (_Gods *GodsFilterer) FilterPause(opts *bind.FilterOpts) (*GodsPauseIterator, error) {

	logs, sub, err := _Gods.contract.FilterLogs(opts, "Pause")
	if err != nil {
		return nil, err
	}
	return &GodsPauseIterator{contract: _Gods.contract, event: "Pause", logs: logs, sub: sub}, nil
}

// WatchPause is a free log subscription operation binding the contract event 0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625.
//
// Solidity: event Pause()
func (_Gods *GodsFilterer) WatchPause(opts *bind.WatchOpts, sink chan<- *GodsPause) (event.Subscription, error) {

	logs, sub, err := _Gods.contract.WatchLogs(opts, "Pause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsPause)
				if err := _Gods.contract.UnpackLog(event, "Pause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// GodsTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Gods contract.
type GodsTransferIterator struct {
	Event *GodsTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsTransfer represents a Transfer event raised by the Gods contract.
type GodsTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_Gods *GodsFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*GodsTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Gods.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &GodsTransferIterator{contract: _Gods.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_Gods *GodsFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *GodsTransfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Gods.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsTransfer)
				if err := _Gods.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// GodsUnpauseIterator is returned from FilterUnpause and is used to iterate over the raw logs and unpacked data for Unpause events raised by the Gods contract.
type GodsUnpauseIterator struct {
	Event *GodsUnpause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GodsUnpauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GodsUnpause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GodsUnpause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GodsUnpauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GodsUnpauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GodsUnpause represents a Unpause event raised by the Gods contract.
type GodsUnpause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUnpause is a free log retrieval operation binding the contract event 0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33.
//
// Solidity: event Unpause()
func (_Gods *GodsFilterer) FilterUnpause(opts *bind.FilterOpts) (*GodsUnpauseIterator, error) {

	logs, sub, err := _Gods.contract.FilterLogs(opts, "Unpause")
	if err != nil {
		return nil, err
	}
	return &GodsUnpauseIterator{contract: _Gods.contract, event: "Unpause", logs: logs, sub: sub}, nil
}

// WatchUnpause is a free log subscription operation binding the contract event 0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33.
//
// Solidity: event Unpause()
func (_Gods *GodsFilterer) WatchUnpause(opts *bind.WatchOpts, sink chan<- *GodsUnpause) (event.Subscription, error) {

	logs, sub, err := _Gods.contract.WatchLogs(opts, "Unpause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GodsUnpause)
				if err := _Gods.contract.UnpackLog(event, "Unpause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
